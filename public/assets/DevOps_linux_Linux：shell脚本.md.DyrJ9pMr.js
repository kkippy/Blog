import{_ as i,c as s,o as t,a4 as e,j as l}from"./chunks/framework.BMnk781U.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"DevOps/linux/Linux：shell脚本.md","filePath":"DevOps/linux/Linux：shell脚本.md"}'),a={name:"DevOps/linux/Linux：shell脚本.md"},h=e(`<br><blockquote><p>Shell 脚本（shell script），是一种为 shell 编写的脚本程序。它有众多的分类，例如C Shell（/usr/bin/csh）、K Shell（/usr/bin/ksh）、Bourne Shell（/usr/bin/sh或/bin/sh）、Bourne Again Shell（/bin/bash）等。在国内，使用广泛的是Bourne Again Shell（即bash）</p></blockquote><h2 id="shell脚本格式要求" tabindex="-1">shell脚本格式要求 <a class="header-anchor" href="#shell脚本格式要求" aria-label="Permalink to &quot;shell脚本格式要求&quot;">​</a></h2><ul><li>脚本文件的后缀通常以<code>.sh</code>结尾，例如test.sh</li><li>脚本内容以#!/bin/bash 开头</li><li>脚本需要有可执行权限</li></ul><h3 id="shell脚本的执行方式" tabindex="-1">shell脚本的执行方式 <a class="header-anchor" href="#shell脚本的执行方式" aria-label="Permalink to &quot;shell脚本的执行方式&quot;">​</a></h3><ol><li>输入脚本的绝对路径或相对路径（需要赋予脚本执行权限（x），再执行脚本）</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> u+x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.sh</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 给创建test.sh的用户赋予该文件执行的权限</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./test.sh</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #执行test.sh</span></span></code></pre></div><ol start="2"><li>sh + 脚本（不用赋予脚本x权限，直接执行）</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.sh</span></span></code></pre></div><h2 id="输出字符串案例" tabindex="-1">输出字符串案例 <a class="header-anchor" href="#输出字符串案例" aria-label="Permalink to &quot;输出字符串案例&quot;">​</a></h2><ol><li>创建test.sh文件并使用<code>echo</code>命令将&#39;hello，world&#39;打印到终端</li></ol><p align="center"><img src="https://img2.imgtp.com/2024/05/12/HT2uWT0e.png"></p><p align="center"><img src="https://img2.imgtp.com/2024/05/12/j1CQXRlb.png"></p><ol start="2"><li>添加执行权限后可以看到文件名已经变成绿色</li></ol>`,14),n=l("p",{align:"center"},[l("img",{src:"https://img2.imgtp.com/2024/05/12/pqivgaaF.png","\\":""})],-1),o=e('<ol start="3"><li>执行test.sh脚本。可以看到‘hello,world’字符串已经打印到终端了</li></ol><p align="center"><img src="https://img2.imgtp.com/2024/05/12/59KJzwPJ.png"></p><h2 id="shell变量" tabindex="-1">shell变量 <a class="header-anchor" href="#shell变量" aria-label="Permalink to &quot;shell变量&quot;">​</a></h2><p>在Linux中，有系统变量和用户自定义变量。系统变量例如 <code>$HOME</code>、<code>$USER</code>、<code>$SHELL</code>等，可以使用set命令查看所有的系统变量：</p><p align="center"><img src="https://img2.imgtp.com/2024/05/12/iHf2cOid.png"></p><h3 id="shell变量的定义" tabindex="-1">shell变量的定义 <a class="header-anchor" href="#shell变量的定义" aria-label="Permalink to &quot;shell变量的定义&quot;">​</a></h3><ul><li><p>定义变量 ： <code>变量=值</code> <strong>注意不能有空格</strong></p></li><li><p>撤销变量 : <code>unset [值]</code></p></li><li><p>声明静态变量 ： <code>readonly [变量]</code>（静态变量不能unset）</p></li><li><p>输出变量时要加<code>$</code></p></li><li><p>将命令的返回值赋给变量:</p><ul><li>A=`date`，将反引号中的内容执行后赋值给A</li></ul><p align="center"><img src="https://img2.imgtp.com/2024/05/12/qzc1VRHq.png"></p><p align="center"><img src="https://img2.imgtp.com/2024/05/12/BWAk1RtY.png"></p><ul><li>A=$(date)，这种方式等价于反引号</li></ul><p align="center"><img src="https://img2.imgtp.com/2024/05/12/u2rSalqm.png"></p><p align="center"><img src="https://img2.imgtp.com/2024/05/12/C84T2DGE.png"></p></li></ul><h3 id="变量定义的规则" tabindex="-1">变量定义的规则 <a class="header-anchor" href="#变量定义的规则" aria-label="Permalink to &quot;变量定义的规则&quot;">​</a></h3><ol><li>变量名称可以由字母、数字和下划线组成，但是不能以数字开头。</li><li>等号两侧不能有空格</li><li>变量名称一般习惯为大写</li></ol><h2 id="环境变量设置" tabindex="-1">环境变量设置 <a class="header-anchor" href="#环境变量设置" aria-label="Permalink to &quot;环境变量设置&quot;">​</a></h2><p>环境变量是方便多个shell脚本用到同一个变量值所设定的，即在任何一个shell脚本中都可以使用这个变量，类似于其他语言中的全局变量概念，可以在/etc/profile文件中配置，设置步骤如下：</p><ol><li>export 变量名=变量值（将变量输出为环境变量（即全局变量））</li></ol><p align="center"><img src="https://img2.imgtp.com/2024/05/12/OUEDKKy2.png"></p><ol start="2"><li>source 配置文件 （让修改后的配置文件立即生效）</li></ol><p align="center"><img src="https://img2.imgtp.com/2024/05/12/YwyZoQny.png"></p><ol start="3"><li>echo $变量名 （查询环境变量的值）。可以从上述图中看到JAVA_HOME环境变量已经配置成功</li></ol>',16),p=[h,n,o];function c(r,d,g,m,u,_){return t(),s("div",null,p)}const x=i(a,[["render",c]]);export{b as __pageData,x as default};
