import{_ as i,c as a,a as t,a4 as s,o as e}from"./chunks/framework.BMnk781U.js";const b=JSON.parse('{"title":"硬盘","description":"","frontmatter":{"title":"硬盘"},"headers":[],"relativePath":"DevOps/linux/Linux磁盘分区及挂载.md","filePath":"DevOps/linux/Linux磁盘分区及挂载.md"}'),n={name:"DevOps/linux/Linux磁盘分区及挂载.md"},l=s(`<blockquote><p>对于 Linux 来说，不论有几个分区，最终是建立在根分区的基础之上的。每个分区都是用来组成整个文件系统的一部分。采用“载入”的方式，将目录与分区连接起来形成一一对应的关系。</p></blockquote><p align="center"><img src="https://pic.imgdb.cn/item/6628757a0ea9cb140353b2f7.png" alt=""></p><h2 id="硬盘" tabindex="-1">硬盘 <a class="header-anchor" href="#硬盘" aria-label="Permalink to &quot;硬盘&quot;">​</a></h2><p>分为 IDE 和 SCSI 硬盘，基本上是 SCSI。对于 IDE 硬盘，其标识符是 hdx~.对于 SCSI 标识符为 sdx~.x 为盘号（a:基本盘，b:基本从属盘，c:辅助主盘，d:辅助从属盘。也可以直接叫第一块到第四块硬盘）。“~”代表分区，前四个分区用数字 1 到 4 表示，它们是主分区或扩展分区，从 5 开始就是逻辑分区。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sda3 : 代表第一个SCSI硬盘的第三个主分区或扩展分区</span></span></code></pre></div><h3 id="查看所有设备挂载情况" tabindex="-1">查看所有设备挂载情况 <a class="header-anchor" href="#查看所有设备挂载情况" aria-label="Permalink to &quot;查看所有设备挂载情况&quot;">​</a></h3><p>使用<code>lsblk</code>或者<code>lsblk -f</code>命令查看</p><p align="center"><img src="https://pic.imgdb.cn/item/662876620ea9cb1403571a08.png" alt=""></p><h3 id="查看磁盘情况" tabindex="-1">查看磁盘情况 <a class="header-anchor" href="#查看磁盘情况" aria-label="Permalink to &quot;查看磁盘情况&quot;">​</a></h3><ol><li>df -h [选项]：查询系统整体磁盘的使用情况</li></ol><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>选项说明</span></span>
<span class="line"><span>-s 指定目录占用大小汇总</span></span>
<span class="line"><span>-h 带计量单位</span></span>
<span class="line"><span>-a 含文件</span></span>
<span class="line"><span>--max-depth=n 子目录深度为n</span></span>
<span class="line"><span>-c 列以明细的同时增加汇总值</span></span></code></pre></div><ol start="2"><li>df -h /目录名：查询指定目录的磁盘情况，默认为当前目录。例如查询/opt 目录的磁盘占用情况，深度为 1：</li></ol><p align="center"><img src="https://pic.imgdb.cn/item/662876ef0ea9cb140357e61f.png" alt=""></p><ol start="3"><li>tree 目录名：以树状显示目录结构（默认没有安装 tree 命令，使用<code>yum install tree</code>命令安装）</li></ol><p align="center"><img src="https://pic.imgdb.cn/item/662877480ea9cb1403586f8e.png" alt=""></p><h2 id="磁盘分区并永久挂载" tabindex="-1">磁盘分区并永久挂载 <a class="header-anchor" href="#磁盘分区并永久挂载" aria-label="Permalink to &quot;磁盘分区并永久挂载&quot;">​</a></h2><p>在实际开发中，必定会遇到磁盘空间不足的情况，在对磁盘进行扩容之后，就有必要对磁盘空间进行分区了，以便文件的更好管理。例如将/dev/sdb 分区为两个分区，总计 40GB，第一个分区 20.5GB，第二个分区 19.5G。</p><ol><li>使用<code>fdisk</code>命令进行分区：fdisk /dev/sdb</li></ol><p align="center"><img src="https://pic.imgdb.cn/item/662878600ea9cb14035a30c7.png" alt=""></p><ol start="2"><li>根据提示填写相应信息。开始分区后输入 n，新增分区，然后选择 p，分区类型为主分区。分区号代表之后会有几个分区（默认 1）两次回车默认剩余全部空间。最后输入 w 写入分区并退出，若不保存退出输入 q。</li></ol><p align="center"><img src="https://pic.imgdb.cn/item/662878a20ea9cb14035aa71a.png" alt=""></p><ol start="3"><li>格式化磁盘，使用<code>mkfs</code>命令进行：mkfs -t ext4 /dev/sdb1(ext4 是分区类型，sdb1 是分好区后的分区名)。</li></ol><p align="center"><img src="https://pic.imgdb.cn/item/66287a580ea9cb14035d47c4.png" alt=""></p><ol start="4"><li>使用<code>mount</code>命令将分区与目录联系起来，命令格式为：mount [设备名称] [挂载目录]。例如 mount /dev/sdb1 /newdisk</li></ol><p align="center"><img src="https://pic.imgdb.cn/item/66287b330ea9cb14035e9050.png" alt=""></p>`,25),p=s(`<ol start="5"><li>通过修改/etc/fstab 文件永久挂载分区，因为用上述命令行的方式(mount /dev/sdb1 /newdisk)挂载后，当系统重启后原先的挂载关系会失效。所以需要修改/etc/fstab 文件以实现分区的永久挂载，修改后执行<code>mount -a</code>命令即刻生效，或者重启系统也可以。</li></ol><p align="center"><img src="https://pic.imgdb.cn/item/66287e750ea9cb14036341b5.png" alt=""></p><h2 id="相关实用指令" tabindex="-1">相关实用指令 <a class="header-anchor" href="#相关实用指令" aria-label="Permalink to &quot;相关实用指令&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;^-&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> ## 统计/opt文件夹下文件的个数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;^d&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> ## 统计/opt文件夹下目录的个数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -lR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;^-&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> ## 统计/opt文件夹下文件的个数，包括子文件夹里的</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -lR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;^d&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> ## 统计/opt文件夹下目录的个数，包括子文件夹里的</span></span></code></pre></div><blockquote><p>在日常维护中离不开和磁盘打交道，例如空间不足需要删除缓存文件或者对磁盘进行扩容等都是非常实际且高频的需求。所以在磁盘处理方面的技能水平还是要非常熟练的，毕竟磁盘管理得好坏直接关系到整个系统的性能问题，以上就是对磁盘管理及分区命令的简要总结，更多细则请结合官方文档使用~</p></blockquote>`,5);function h(k,d,c,o,r,g){return e(),a("div",null,[l,t(" 若想取消分区与目录之间的关系，即卸载分区，那么可以使用`umount`命令取消，例如umount /dev/sdb1 /newdisk "),p])}const u=i(n,[["render",h]]);export{b as __pageData,u as default};
