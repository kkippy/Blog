import{_ as s,c as i,o as a,a4 as l}from"./chunks/framework.BMnk781U.js";const g=JSON.parse('{"title":"组与权限","description":"","frontmatter":{"title":"组与权限"},"headers":[],"relativePath":"DevOps/linux/Linux组与权限.md","filePath":"DevOps/linux/Linux组与权限.md"}'),h={name:"DevOps/linux/Linux组与权限.md"},t=l(`<blockquote><p>在 Linux 中，每个用户必须属于一个组，每个文件都有所有者、所在组、其他组的概念。这是基于万物皆文件的基础之上的，因为文件的至关重要性，文件之间的关系也就变得同等重要了。</p></blockquote><p>如图所示，user1 创建了 file 文件，自然而然 file 的所有者是 user1，那么 user1 所在的组别一对于 file 来说就是所在组了。而组别一以外的组别对于 file 来说都是其他组。当然了，所有者或者所在组对于 file 文件来说都是可以变更的。而对于不同角色来说，对 file 文件有着不同的权限，接下来会详细解释。</p><p align="center"><img src="https://pic.imgdb.cn/item/661deea30ea9cb1403ab411f.png"></p><h2 id="文件-目录的所有者" tabindex="-1">文件/目录的所有者 <a class="header-anchor" href="#文件-目录的所有者" aria-label="Permalink to &quot;文件/目录的所有者&quot;">​</a></h2><p>一般谁创建了该文件，谁就是该文件的所有者。可以使用 ls -ahl 查看文件的所有者 使用 <code>chown [新的所有者] [文件名]</code> 来修改文件的所有者。如果是目录的话 使用-R 选项将目录下的所有子文件进行递归处理。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chown</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tom</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/abc.txt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 代表将abc的所有者改为Tom</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chown</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -R</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tom</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/kkk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 代表将kkk目录下的所有文件的所有者都改为Tom</span></span></code></pre></div><h2 id="组" tabindex="-1">组 <a class="header-anchor" href="#组" aria-label="Permalink to &quot;组&quot;">​</a></h2><h3 id="组的创建" tabindex="-1">组的创建 <a class="header-anchor" href="#组的创建" aria-label="Permalink to &quot;组的创建&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">groupadd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> group1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> //创建名为group1的组</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">useradd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> group1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> //创建一个用户user1并将他添加到group1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 组中</span></span></code></pre></div><h3 id="查询用户所在的组" tabindex="-1">查询用户所在的组 <a class="header-anchor" href="#查询用户所在的组" aria-label="Permalink to &quot;查询用户所在的组&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">id</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> //查询user1用户所在的组</span></span></code></pre></div><h3 id="改变用户所在组" tabindex="-1">改变用户所在组 <a class="header-anchor" href="#改变用户所在组" aria-label="Permalink to &quot;改变用户所在组&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">usermod</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 组名</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 用户名</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">usermod</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 目录名</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 用户名</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> //改变该用户登录的初始目录。用户需要有进入新目录的权限</span></span></code></pre></div><h3 id="修改文件或目录所在组" tabindex="-1">修改文件或目录所在组 <a class="header-anchor" href="#修改文件或目录所在组" aria-label="Permalink to &quot;修改文件或目录所在组&quot;">​</a></h3><p>chgrp [选项] [newgroup] 文件/目录 使用-R 选项将目录下的所有子文件进行递归处理</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chgrp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> group2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/abc.txt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 将abc文件的所在组修改为group2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chgrp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -R</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> group2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/kkk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 代表将kkk目录下的所有文件的所在组都改为group2</span></span></code></pre></div><h2 id="权限-rwx" tabindex="-1">权限(rwx) <a class="header-anchor" href="#权限-rwx" aria-label="Permalink to &quot;权限(rwx)&quot;">​</a></h2><blockquote><p>-rwxrw-r-- 1 root root 1213 Feb 2 09:39 abc.txt。这是使用<code>ll</code>查询后的结果，从第 2 位到第 10 位代表了 abc.txt 文件的详细权限。<br> abc.txt 的所有者 root 对其拥有可读，可写（因为其组权限也有 w，所以可以对文件进行删除。注意可修改不代表可删除，删除一个文件的前提是对该文件所在目录有可写权限），可执行的权限。root 组所在成员对该文件拥有查看目录，修改目录的权限；其他组的成员对这个文件只拥有读的权限，以下是对这三种权限的解释。</p></blockquote><h3 id="权限对于文件" tabindex="-1">权限对于文件 <a class="header-anchor" href="#权限对于文件" aria-label="Permalink to &quot;权限对于文件&quot;">​</a></h3><ul><li>r 代表可读：可以查看</li><li>w 代表可写：可以修改文件</li><li>x 代表可执行：文件可以被执行</li></ul><h3 id="权限对于目录" tabindex="-1">权限对于目录 <a class="header-anchor" href="#权限对于目录" aria-label="Permalink to &quot;权限对于目录&quot;">​</a></h3><ul><li>r 代表可读：可以查看，使用<code>ls</code>展示目录中的内容</li><li>w 代表可写：可以修改，对目录内文件进行新增、删除；重命名目录</li><li>x 代表可执行：可以进入该目录如<code>cd</code></li></ul><p>如果没有 r 权限，仅仅是不能展示目录下的文件，如果对目录拥有写的权限的话照样可以直接使用<code>vim</code>去更改目录下文件的内容。</p><h3 id="修改文件或者目录的权限" tabindex="-1">修改文件或者目录的权限 <a class="header-anchor" href="#修改文件或者目录的权限" aria-label="Permalink to &quot;修改文件或者目录的权限&quot;">​</a></h3><p>通过修改文件或者目录的权限，从而对所有者、所在组和其他组的成员进行权限的划分。</p><ol><li>通过+ - = 对权限进行变更。注意在不同角色之间要用逗号分隔</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">u:所有者</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> g:所在组</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> o:其他人</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a:所有人（u,g,o的总和）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> u=rwx，g=rx，o=r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a.txt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   //代表对a文件，所有者有读写执行的权限，所在组有读和执行的权限，其他人有读的权限</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> o+w</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a.txt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   //代表给其他组添加对a文件可以修改的权限</span></span></code></pre></div><ol start="2"><li>用数字变更权限。（三种权限也可以用数字表示：r=4 ; w=2 ; x=1）</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ; w</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ; x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 所以rwx=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 7</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> u=rwx，g=rx，o=r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a.txt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 也可以写作为</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chmod</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 754</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a.txt</span></span></code></pre></div>`,29),e=[t];function n(p,k,r,d,o,F){return a(),i("div",null,e)}const u=s(h,[["render",n]]);export{g as __pageData,u as default};
